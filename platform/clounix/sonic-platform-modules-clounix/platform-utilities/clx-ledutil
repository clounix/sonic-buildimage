#!/usr/bin/env python3
#
# main.py
#
# Command-line utility for interacting with FAN Controller in KDDF mode in SONiC
#

try:
    import sys
    import os
    import click
    from tabulate import tabulate
except ImportError as e:
    raise ImportError("%s - required module not found" % str(e))

VERSION = '2.0'

SYSLOG_IDENTIFIER = "ledutil"
PLATFORM_SPECIFIC_MODULE_NAME = "ledutil"
PLATFORM_SPECIFIC_CLASS_NAME = "LedUtil"

# Global platform-specific ledutil class instance
platform_chassis = None


# ==================== Wrapper APIs ====================
def _wrapper_getstatusled(device_name):
    if platform_chassis is not None:
        outputs =platform_chassis.get_led(device_name)
    else:
        outputs = "Not Support"
    click.echo(outputs)

def _wrapper_setstatusled(device_name, color, color_state):
    if platform_chassis is not None:
        outputs = platform_chassis.set_led(device_name, color)
    else:
        outputs = "Not Support"
    click.echo(outputs)

def _wrapper_debug_sysfs():
    return platform_chassis.get_debug_info('sysled')

# ==================== CLI commands and groups ====================

# This is our main entrypoint - the main 'ledutil' command
@click.group()
def cli():
    """kddf_ledutil - Command line utility for providing System LED information"""

    if os.geteuid() != 0:
        click.echo("Root privileges are required for this operation")
        sys.exit(1)

    # Load platform-specific fanutil class
    global platform_chassis

    # Load new platform api class
    try:
        import sonic_platform.platform
        platform_chassis = sonic_platform.platform.Platform().get_chassis()
    except Exception as e:
        click.echo(f"Failed to load chassis due to {str(e)}")
        sys.exit(2)

    # Load platform-specific fanutil class if 2.0 implementation is not present
    if platform_chassis is None:
        click.echo("Failed to load chassis...")
        sys.exit(2)

# 'version' subcommand
@cli.command()
def version():
    """Display version info"""
    click.echo(f"KDDF ledutil version {VERSION}")

DEVICE_NAME = [
    'sys_led_status',
    'id_led_status',
]

## SYSLED status
COLOR = [
    'off',                  # 0
    'green',                # 1
    'amber',                # 2
    'red',                  # 3
    'green_blinking',       # 4
    'amber_blinking',       # 5
    'red_blinking',         # 6
    'blue',                 # 7
    'blue_blinking'         # 8
]

# 'getstatusled' subcommand
@cli.command('getstatusled', short_help='get status of led')
# @click.argument('device_name', type=click.STRING)
def getstatusled():
    """DEVICE_NAME:
        sys_led_status
        bmc_led_status
        fan_led_status
        psu_led_status
        id_led_status
    """
    # if device_name is None:
        # click.echo("device_name is required")
        # raise click.Abort()

    sysled = platform_chassis.get_sysled()

    sys_led = sysled.get_sys_led_status()
    bmc_led = sysled.get_bmc_led_status()
    fan_led = sysled.get_fan_led_status()
    psu_led = sysled.get_psu_led_status()
    id_led = sysled.get_id_led_status()

    header = ['SYS LED', 'BMC LED', 'FAN LED', 'PSU LED', 'ID LED']
    status_table = [[sys_led, bmc_led, fan_led, psu_led, id_led]]

    if status_table:
        click.echo(tabulate(status_table, header, tablefmt="simple"))

# 'setstatusled' subcommand
@cli.command('setstatusled', short_help='set status of led')
@click.argument('device_name', type=click.STRING)
@click.argument('color', type=click.STRING)
def setstatusled(device_name, color):
    """DEVICE_NAME:

        sys_led_status
        id_led_status

    SYSLED Color:

        'dark',                 # 0 dark(灭)
        'green',                # 1 green(绿色)
        'amber',                # 2 amber/yellow(黄色)
        'red',                  # 3 red(红色)
        'green-flashing',       # 4 green light flashing(绿色闪烁)
        'amber-flashing',       # 5 amber/yellow light flashing(黄色闪烁)
        'red-flashing',         # 6 red light flashing(红色闪烁)
        'blue',                 # 7 blue(篮色)
        'blue-flashing'         # 8 blue light flashing(蓝色闪烁)
    """

    if device_name is None:
        click.echo("device_name is required")
        raise click.Abort()

    if device_name not in DEVICE_NAME:
        click.echo(f"device_name is {device_name}, should be {DEVICE_NAME}")
        raise click.Abort()

    if color not in COLOR:
        click.echo(f"color is {color}, should be {COLOR}")
        raise click.Abort()

    # _wrapper_setstatusled(device_name, color)
    sysled = platform_chassis.get_sysled()
    if device_name == 'sys_led_status':
        sysled.set_sys_led_status(color)
    elif device_name == 'id_led_status':
        sysled.set_id_led_status(color)

# 'debug' subcommand
@cli.command('debug', short_help='Show sysled debug info')
def debug():
    """kddf_fanutil debug commands"""
    debug = _wrapper_debug_sysfs()
    if debug is None:
        debug = 'N/A'
    click.echo(debug)

if __name__ == '__main__':
    cli()
