#!/usr/bin/env python3
#
# main.py
#
# Command-line utility for interacting with cpld Controller in PDDF mode in SONiC
#

try:
    import sys
    import os
    import click
    from tabulate import tabulate
except ImportError as e:
    raise ImportError("%s - required module not found" % str(e))

VERSION = '2.0'

# Global platform-specific cpldutil class instance
platform_chassis = None

def _wrapper_get_num_cplds():
    try:
        return platform_chassis.get_num_cplds()
    except NotImplementedError:
        pass
    return 0

def _wrapper_get_cpld_name(idx):
    return platform_chassis.get_cpld(idx - 1).get_name()

def _wrapper_get_cpld_type(idx):
    return platform_chassis.get_cpld(idx - 1).get_type()

def _wrapper_get_cpld_hw_version(idx):
    return platform_chassis.get_cpld(idx - 1).get_hw_version()

def _wrapper_get_cpld_board_version(idx):
    return platform_chassis.get_cpld(idx - 1).get_board_version()

def _wrapper_debug_sysfs():
    return platform_chassis.get_debug_info('cpld')

# This is our main entrypoint - the main 'cpldutil' command
@click.group()
def cli():
    """pddf_cpldutil - Command line utility for providing cpld information"""

    global platform_chassis

    if os.geteuid() != 0:
        click.echo("Root privileges are required for this operation")
        sys.exit(1)

    # Load new platform api class
    try:
        from sonic_platform.platform import Platform
        platform_chassis = Platform().get_chassis()
    except Exception as e:
        click.echo("Failed to load chassis due to {}".format(str(e)))

    # Load platform-specific cpldutil class if new platform object class is not found
    if platform_chassis is None:
        click.echo("Failed to load chassis...")
        sys.exit(2)

# 'version' subcommand
@cli.command()
def version():
    """Display version info"""
    click.echo("PDDF cpldutil version {0}".format(VERSION))

# 'num' subcommand
@cli.command()
def num():
    """Display number of cplds installed on device"""
    click.echo(_wrapper_get_num_cplds())

# 'info' subcommand
@cli.command()
@click.option('-i', '--index', default=-1, type=int, help="the index of cpld")
def info(index):
    """Display CPLD manufacturer info"""
    supported_cpld = list(range(1, _wrapper_get_num_cplds() + 1))
    cpld_ids = []
    if (index < 0):
        cpld_ids = supported_cpld
    else:
        cpld_ids = [index]

    status_table = []
    for cpld in cpld_ids:
        if cpld not in supported_cpld:
            click.echo("Error! The cpld is not available on the platform.\n" \
                       "Number of supported cpld - {}.".format(len(supported_cpld)))
            continue
        cpld_name = _wrapper_get_cpld_name(cpld)
        cpld_type = _wrapper_get_cpld_type(cpld)
        hw_version = _wrapper_get_cpld_hw_version(cpld)
        board_version = _wrapper_get_cpld_board_version(cpld)

        status_table.append([cpld_name, cpld_type, hw_version, board_version])

    header = ['CPLD', 'CPLD Type', 'HW Version', 'Board Version']
    if status_table:
        click.echo(tabulate(status_table, header, tablefmt="simple"))

# 'debug' subcommand
@cli.command('debug', short_help='Show cpld debug info')
def debug():
    """kddf_fanutil debug commands"""
    debug = _wrapper_debug_sysfs()
    if debug is None:
        debug = 'N/A'
    click.echo(debug)

if __name__ == '__main__':
    cli()
